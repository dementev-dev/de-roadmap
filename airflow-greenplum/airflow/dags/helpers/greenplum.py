from __future__ import annotations

import logging
import os
from typing import List, Sequence, Tuple

import psycopg2

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Greenplum. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º Airflow Connection,
# –Ω–æ –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö –º–æ–∂–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ ENV-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ, —É—Å—Ç–∞–Ω–æ–≤–∏–≤ GP_USE_AIRFLOW_CONN=false.
GP_CONN_ID = os.getenv("GP_CONN_ID", "greenplum_conn")
GP_USE_AIRFLOW_CONN = os.getenv("GP_USE_AIRFLOW_CONN", "true").lower() in ("1", "true", "yes")

# –û–∂–∏–¥–∞–µ–º–∞—è —Å—Ö–µ–º–∞ —Ç–∞–±–ª–∏—Ü—ã orders –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
EXPECTED_ORDERS_SCHEMA: List[Tuple[str, str]] = [
    ("order_id", "bigint"),
    ("order_ts", "timestamp without time zone"),
    ("customer_id", "bigint"),
    ("amount", "numeric"),
]


def get_gp_conn():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç psycopg2 connection –∫ Greenplum.
    
    –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:
    1. –ß–µ—Ä–µ–∑ Airflow Connection (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
    2. –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º –æ–∫—Ä—É–∂–µ–Ω–∏—è (—Ñ–æ–ª–ª–±–µ–∫)
    
    Returns:
        psycopg2 connection object
    """
    if GP_USE_AIRFLOW_CONN:
        try:
            from airflow.providers.postgres.hooks.postgres import PostgresHook

            hook = PostgresHook(postgres_conn_id=GP_CONN_ID)
            conn = hook.get_conn()
            logging.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Airflow Connection —É—Å–ø–µ—à–Ω–æ")
            return conn
        except Exception as e:
            logging.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ Airflow Connection: %s", e)
            logging.info("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ ENV –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º")
            # –§–æ–ª–ª–±–µ–∫ –Ω–∞ –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º –æ–∫—Ä—É–∂–µ–Ω–∏—è.

    # –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º –æ–∫—Ä—É–∂–µ–Ω–∏—è
    conn_params = {
        "dbname": os.getenv("GP_DB", "gpadmin"),
        "user": os.getenv("GP_USER", "gpadmin"),
        "password": os.getenv("GP_PASSWORD", ""),
        "host": os.getenv("GP_HOST", "greenplum"),
        "port": int(os.getenv("GP_PORT", "5432")),
    }
    logging.info("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Greenplum: %s:%s", conn_params["host"], conn_params["port"])
    return psycopg2.connect(**conn_params)


def assert_orders_table_exists(conn) -> None:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü—ã orders –≤ —Å—Ö–µ–º–µ public.
    
    Args:
        conn: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Greenplum
        
    Raises:
        ValueError: –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    """
    logging.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã public.orders...")
    with conn.cursor() as cur:
        cur.execute(
            """
            SELECT 1
            FROM pg_catalog.pg_tables
            WHERE schemaname = 'public' AND tablename = 'orders'
            """
        )
        if cur.fetchone() is None:
            raise ValueError("‚ùå –¢–∞–±–ª–∏—Ü–∞ public.orders –Ω–µ –Ω–∞–π–¥–µ–Ω–∞; –∑–∞–ø—É—Å—Ç–∏ DAG csv_to_greenplum.")
    logging.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ public.orders —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")


def fetch_orders_schema(conn) -> Sequence[Tuple[str, str]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Ö–µ–º—É —Ç–∞–±–ª–∏—Ü—ã orders –∏–∑ information_schema.
    
    Args:
        conn: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Greenplum
        
    Returns:
        –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (–∏–º—è_–∫–æ–ª–æ–Ω–∫–∏, —Ç–∏–ø_–¥–∞–Ω–Ω—ã—Ö)
    """
    with conn.cursor() as cur:
        cur.execute(
            """
            SELECT column_name, data_type
            FROM information_schema.columns
            WHERE table_schema = 'public' AND table_name = 'orders'
            ORDER BY ordinal_position
            """
        )
        return cur.fetchall()


def assert_orders_schema(conn) -> None:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Å—Ö–µ–º–∞ —Ç–∞–±–ª–∏—Ü—ã orders —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π.
    
    Args:
        conn: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Greenplum
        
    Raises:
        ValueError: –ï—Å–ª–∏ —Å—Ö–µ–º–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π
    """
    logging.info("üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–µ–º—É —Ç–∞–±–ª–∏—Ü—ã orders...")
    schema = fetch_orders_schema(conn)
    logging.info("üìä –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Å—Ö–µ–º–∞: %s", list(schema))
    logging.info("üìä –û–∂–∏–¥–∞–µ–º–∞—è —Å—Ö–µ–º–∞: %s", EXPECTED_ORDERS_SCHEMA)
    
    if list(schema) != EXPECTED_ORDERS_SCHEMA:
        raise ValueError(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ö–µ–º–∞ orders: {schema}. –û–∂–∏–¥–∞–ª–∏ {EXPECTED_ORDERS_SCHEMA}.")
    logging.info("‚úÖ –°—Ö–µ–º–∞ —Ç–∞–±–ª–∏—Ü—ã orders —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º")


def fetch_orders_count(conn) -> int:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ orders.
    
    Args:
        conn: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Greenplum
        
    Returns:
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ
    """
    with conn.cursor() as cur:
        cur.execute("SELECT COUNT(*) FROM public.orders")
        return cur.fetchone()[0]


def assert_orders_have_rows(conn) -> None:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ orders –Ω–µ –ø—É—Å—Ç–∞—è.
    
    Args:
        conn: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Greenplum
        
    Raises:
        ValueError: –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è
    """
    logging.info("üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ orders...")
    row_count = fetch_orders_count(conn)
    logging.info("üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ orders: %s", row_count)
    
    if row_count <= 0:
        raise ValueError("‚ùå –¢–∞–±–ª–∏—Ü–∞ public.orders –ø—É—Å—Ç–∞—è ‚Äî –∑–∞–ø—É—Å—Ç–∏ DAG csv_to_greenplum –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π.")
    logging.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ orders —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ (%s —Å—Ç—Ä–æ–∫)", row_count)


def fetch_orders_duplicates(conn) -> int:
    """
    –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ order_id.
    
    Args:
        conn: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Greenplum
        
    Returns:
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è order_id
    """
    with conn.cursor() as cur:
        cur.execute(
            """
            SELECT COUNT(*) FROM (
                SELECT order_id
                FROM public.orders
                GROUP BY order_id
                HAVING COUNT(*) > 1
            ) d
            """
        )
        return cur.fetchone()[0]


def assert_orders_no_duplicates(conn) -> None:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤ —Ç–∞–±–ª–∏—Ü–µ –Ω–µ—Ç –¥—É–±–ª–µ–π –ø–æ order_id.
    
    Args:
        conn: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Greenplum
        
    Raises:
        ValueError: –ï—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã
    """
    logging.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ order_id...")
    duplicates = fetch_orders_duplicates(conn)
    logging.info("üìä –ù–∞–π–¥–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: %s", duplicates)
    
    if duplicates:
        raise ValueError(f"‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥—É–±–ª–∏ –ø–æ order_id ({duplicates} —à—Ç.) ‚Äî –ø—Ä–æ–≤–µ—Ä—å –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö.")
    logging.info("‚úÖ –î—É–±–ª–∏–∫–∞—Ç—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
